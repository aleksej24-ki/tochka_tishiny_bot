import telebot import os from telebot.types import ReplyKeyboardMarkup, KeyboardButton from flask import Flask import threading

from utils.supabase_users import save_user from utils.supabase_parables import get_random_parable, add_parable from utils.wisdom import get_random_wisdom, load_wisdoms, add_wisdom

TOKEN = os.getenv("BOT_TOKEN") ADMIN_ID = int(os.getenv("ADMIN_ID", "708145081"))

bot = telebot.TeleBot(TOKEN)

–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞

@bot.message_handler(commands=['start']) def send_welcome(message): save_user(message.from_user)

markup = ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(
    KeyboardButton("üßò –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É"),
    KeyboardButton("üìñ –ü—Ä–∏—Ç—á–∞")
)
if message.from_user.id == ADMIN_ID:
    markup.add(
        KeyboardButton("üìú –í—Å–µ –º—É–¥—Ä–æ—Å—Ç–∏"),
        KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å")
    )

bot.send_message(
    message.chat.id,
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–¢–æ—á–∫—É —Ç–∏—à–∏–Ω—ã*. –í—ã–±–µ—Ä–∏, —á—Ç–æ –∂–µ–ª–∞–µ—à—å:",
    parse_mode="Markdown",
    reply_markup=markup
)

–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ç—á–∏

@bot.message_handler(commands=['add_parable']) def add_parable_command(message): if message.from_user.id != ADMIN_ID: return bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏—Ç—á–∏.") msg = bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ –ø—Ä–∏—Ç—á—É") bot.register_next_step_handler(msg, save_parable_text)

def save_parable_text(message): add_parable(message.text.strip()) bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∏—Ç—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫

@bot.message_handler(func=lambda message: True) def handle_buttons(message): text = message.text

if text == "üßò –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É":
    bot.send_message(message.chat.id, f"üîß {get_random_wisdom()}")

elif text == "üìú –í—Å–µ –º—É–¥—Ä–æ—Å—Ç–∏":
    wisdoms = load_wisdoms()
    if len(wisdoms) < 15:
        text_block = "\n\n".join([f"{i+1}. {w}" for i, w in enumerate(wisdoms)])
        bot.send_message(message.chat.id, f"üßò –í—Å–µ –º—É–¥—Ä–æ—Å—Ç–∏:\n\n{text_block}")
    else:
        with open("wisdoms_list.txt", "w", encoding="utf-8") as f:
            f.write("\n\n".join([f"{i+1}. {w}" for i, w in enumerate(wisdoms)]))
        with open("wisdoms_list.txt", "rb") as f:
            bot.send_document(message.chat.id, f)

elif text == "üìù –î–æ–±–∞–≤–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å":
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –º—É–¥—Ä–æ—Å—Ç—å:")
        bot.register_next_step_handler(message, receive_wisdom)
    else:
        bot.send_message(message.chat.id, "üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å")

elif text == "üìñ –ü—Ä–∏—Ç—á–∞":
    bot.send_message(message.chat.id, get_random_parable())

else:
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ 'üßò –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É'.")

def receive_wisdom(message): new_text = message.text.strip() if add_wisdom(new_text): bot.send_message(message.chat.id, "üìù –ú—É–¥—Ä–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!") else: bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–∞—è —É–∂–µ –µ—Å—Ç—å.")

Flask —Å–µ—Ä–≤–µ—Ä

app = Flask(name)

@app.route('/') def home(): return "I'm alive!"

def run_web(): app.run(host="0.0.0.0", port=10000)

threading.Thread(target=run_web).start()

bot.polling(none_stop=True)

