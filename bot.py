import telebot
import random
import json
import os
import sqlite3
from datetime import datetime
from flask import Flask
import threading
ADMIN_ID = 708145081

# üîë –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–∏—Ç–∞—Ç
with open("wisdoms.json", "r", encoding="utf-8") as f:
    wisdoms = json.load(f)

# üóÉÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            date_joined TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    date_joined = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR IGNORE INTO users (id, username, first_name, last_name, date_joined)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, date_joined))
    conn.commit()
    conn.close()

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–¢–æ—á–∫—É —Ç–∏—à–∏–Ω—ã*.\n–ù–∞–∂–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ 'üßò –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É'.",
        parse_mode="Markdown"
    )

@bot.message_handler(commands=['add'])
def add_wisdom(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split(' ', 1)
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/add –ú—É–¥—Ä–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–∏—à–∏–Ω—ã.`", parse_mode="Markdown")
        return

    new_wisdom = parts[1].strip()

    # –ó–∞–≥—Ä—É–∑–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏
    with open("wisdoms.json", "r", encoding="utf-8") as f:
        wisdoms = json.load(f)

    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)
    if any(new_wisdom.lower().strip() == w.lower().strip() for w in wisdoms):
        bot.reply_to(message, "‚ö†Ô∏è –¢–∞–∫–∞—è –º—É–¥—Ä–æ—Å—Ç—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        return

    # –î–æ–±–∞–≤–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º
    wisdoms.append(new_wisdom)

    with open("wisdoms.json", "w", encoding="utf-8") as f:
        json.dump(wisdoms, f, ensure_ascii=False, indent=2)

    bot.reply_to(message, "üìù –ú—É–¥—Ä–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
@bot.message_handler(commands=['list'])
def list_wisdoms(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    with open("wisdoms.json", "r", encoding="utf-8") as f:
        wisdoms = json.load(f)

    if not wisdoms:
        bot.reply_to(message, "üì≠ –ü–æ–∫–∞ –Ω–∏ –æ–¥–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        return

    text = "\n\n".join([f"{i+1}. {w}" for i, w in enumerate(wisdoms)])

    if len(text) < 4000:
        bot.reply_to(message, f"üßò –í—Å–µ –º—É–¥—Ä–æ—Å—Ç–∏:\n\n{text}")
    else:
        with open("wisdom_list.txt", "w", encoding="utf-8") as f_out:
            f_out.write(text)
        with open("wisdom_list.txt", "rb") as f_send:
            bot.send_document(message.chat.id, f_send)


@bot.message_handler(commands=['search'])
def search_wisdoms(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split(' ', 1)
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/search —Ç–∏—à–∏–Ω–∞`", parse_mode="Markdown")
        return

    keyword = parts[1].lower().strip()

    with open("wisdoms.json", "r", encoding="utf-8") as f:
        wisdoms = json.load(f)

    matches = [f"{i+1}. {w}" for i, w in enumerate(wisdoms) if keyword in w.lower()]

    if matches:
        response = "\n\n".join(matches)
        if len(response) < 4000:
            bot.reply_to(message, f"üîç –ù–∞–π–¥–µ–Ω–æ:\n\n{response}")
        else:
            with open("search_results.txt", "w", encoding="utf-8") as f_out:
                f_out.write(response)
            with open("search_results.txt", "rb") as f_send:
                bot.send_document(message.chat.id, f_send)
    else:
        bot.reply_to(message, "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.message_handler(commands=['delete'])
def delete_wisdom(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.split(' ', 1)
    if len(parts) < 2 or not parts[1].strip().isdigit():
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –º—É–¥—Ä–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n`/delete 3`", parse_mode="Markdown")
        return

    index = int(parts[1]) - 1  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—á–∏—Ç–∞—é—Ç —Å 1, Python ‚Äî —Å 0

    with open("wisdoms.json", "r", encoding="utf-8") as f:
        wisdoms = json.load(f)

    if 0 <= index < len(wisdoms):
        removed = wisdoms.pop(index)
        with open("wisdoms.json", "w", encoding="utf-8") as f_out:
            json.dump(wisdoms, f_out, ensure_ascii=False, indent=2)
        bot.reply_to(message, f"üóë –£–¥–∞–ª–µ–Ω–æ:\n{removed}")
    else:
        bot.reply_to(message, "‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ.")


# üßò –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω—ã
@bot.message_handler(func=lambda message: True)
def send_wisdom(message):
    if "–∏—Å—Ç–∏–Ω—É" in message.text.lower():
        quote = random.choice(wisdoms)
        bot.send_message(message.chat.id, f"üïØ {quote}")
    elif message.text == "/stats":
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        count = cursor.fetchone()[0]
        conn.close()
        bot.send_message(message.chat.id, f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
    else:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ 'üßò –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É', —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å.")

# üåê Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render + UptimeRobot
app = Flask(__name__)

@app.route('/')
def home():
    return "I'm alive!"

def run_web():
    app.run(host="0.0.0.0", port=10000)

threading.Thread(target=run_web).start()

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
