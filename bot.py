import telebot
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask
import threading

from utils.supabase_users import save_user
from utils.supabase_parables import get_random_parable
from utils.wisdom import get_random_wisdom, load_wisdoms, add_wisdom

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "708145081"))

bot = telebot.TeleBot(TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    save_user(message.from_user)

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        KeyboardButton("üßò –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É"),
        KeyboardButton("üìñ –ü—Ä–∏—Ç—á–∞")
    )
    if message.from_user.id == ADMIN_ID:
        markup.add(
            KeyboardButton("üìú –í—Å–µ –º—É–¥—Ä–æ—Å—Ç–∏"),
            KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å"),
            KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—Ç—á—É"),
            KeyboardButton("üìä –ö–æ–ª-–≤–æ –ø—Ä–∏—Ç—á")
        )

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–¢–æ—á–∫—É —Ç–∏—à–∏–Ω—ã*. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ:",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    text = message.text

    if text == "üßò –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É":
        bot.send_message(message.chat.id, f"üïØ {get_random_wisdom()}")

    elif text == "üìñ –ü—Ä–∏—Ç—á–∞":
        try:
            parable = get_random_parable()
            bot.send_message(message.chat.id, parable)
        except Exception as e:
            bot.send_message(message.chat.id, "‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏—Ç—á–∏.")
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏—Ç—á–∏:", e)


    elif text == "üìú –í—Å–µ –º—É–¥—Ä–æ—Å—Ç–∏":
        wisdoms = load_wisdoms()
        if len(wisdoms) < 15:
            full = "\n\n".join([f"{i+1}. {w}" for i, w in enumerate(wisdoms)])
            bot.send_message(message.chat.id, f"üßò –í—Å–µ –º—É–¥—Ä–æ—Å—Ç–∏:\n\n{full}")
        else:
            with open("wisdoms_list.txt", "w", encoding="utf-8") as f:
                f.write("\n\n".join([f"{i+1}. {w}" for i, w in enumerate(wisdoms)]))
            with open("wisdoms_list.txt", "rb") as f_send:
                bot.send_document(message.chat.id, f_send)

    elif text == "üìù –î–æ–±–∞–≤–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å" and message.from_user.id == ADMIN_ID:
        msg = bot.send_message(message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –º—É–¥—Ä–æ—Å—Ç–∏:")
        bot.register_next_step_handler(msg, receive_wisdom)

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—Ç—á—É" and message.from_user.id == ADMIN_ID:
        msg = bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –ø—Ä–∏—Ç—á–∏:")
        bot.register_next_step_handler(msg, receive_parable)

    elif text == "üìä –ö–æ–ª-–≤–æ –ø—Ä–∏—Ç—á" and message.from_user.id == ADMIN_ID:
        count = count_parables()
        bot.send_message(message.chat.id, f"üìö –í—Å–µ–≥–æ –ø—Ä–∏—Ç—á –≤ –±–∞–∑–µ: {count}")

    else:
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ 'üßò –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É'.")

def receive_wisdom(message):
    text = message.text.strip()
    if add_wisdom(text):
        bot.send_message(message.chat.id, "‚úÖ –ú—É–¥—Ä–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–∞—è —É–∂–µ –µ—Å—Ç—å.")

def receive_parable(message):
    text = message.text.strip()
    add_parable(text)
    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∏—Ç—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

# Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)
@app.route('/')
def home():
    return "I'm alive!"

def run_web():
    app.run(host="0.0.0.0", port=10000)

threading.Thread(target=run_web).start()
bot.polling(none_stop=True)
